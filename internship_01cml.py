# -*- coding: utf-8 -*-
"""Internship-01CML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1br57j9jYhZozKdYoHrdgoQNC_4NX7cYY
"""

import pandas as pd
import numpy as np

account=pd.read_csv("/content/account.csv", delimiter=";")
card=pd.read_csv("/content/card.csv", delimiter=";")
loan=pd.read_csv("/content/loan.csv", delimiter=";")
client=pd.read_csv("/content/client.csv", delimiter=";")
disp=pd.read_csv("/content/disp.csv", delimiter=";")
district=pd.read_csv("/content/district.csv", delimiter=";")
order=pd.read_csv("/content/order.csv", delimiter=";")
trans=pd.read_csv("/content/trans.csv", delimiter=";")

tables = {
    "account": account.columns.tolist(),
    "card": card.columns.tolist(),
    "loan": loan.columns.tolist(),
    "client": client.columns.tolist(),
    "disp": disp.columns.tolist(),
    "district": district.columns.tolist(),
    "order": order.columns.tolist(),
    "trans": trans.columns.tolist(),
}

for table_name, columns in tables.items():
    print(f"{table_name} columns:")
    print(columns)
    print()

district.drop(district.columns[4:16], axis=1, inplace=True)

district.columns

#name changing from a2,a3
district.rename(columns={"A2": "district", "A3": "region_name"}, inplace=True)

district.columns

#merged and join all the columns except trans:
merged_data = pd.merge(left=account, right=loan, on="account_id")

joined_table = pd.merge(disp, client, on="client_id", how="inner")

joined_data = pd.merge(account, order, on="account_id")

merged_df = pd.merge(card, disp, on="disp_id")

joined_data = pd.merge(account, disp, on="account_id", how="inner")

clients_districts_df = pd.merge(client, district, left_on='district_id', right_on='A1', how='left')

joined_data = pd.merge(left=account, right=trans, on="account_id")

"""# **Que and Ans**"""

# What is the demographic profile of the bank's clients and how does it vary across districts?


merged_data = pd.merge(left=account, right=district, left_on="district_id", right_on="A1")

grouped_data = merged_data.groupby("district").agg(count_account_id=("account_id", "count"))

sorted_data = grouped_data.sort_values(by="count_account_id", ascending=False)

print(sorted_data)

# What is the demographic profile of the bank's clients and how does it vary across region?

merged_df = pd.merge(left=account, right=district, left_on='district_id', right_on='A1')

account_district_count = merged_df.groupby('region_name')['account_id'].count()

print(account_district_count)

# Which types of cards are most frequently used by the bank's clients and what is the overall profitability of the credit card business?

card_type_counts = card.groupby('type')['card_id'].count()

print(card_type_counts)

import matplotlib.pyplot as plt
import seaborn as sns

card_types = card_type_counts.index.to_list()
counts = card_type_counts.values.tolist()

plt.figure(figsize=(10, 6))
sns.barplot(x=counts, y=card_types, palette="Set3")

plt.xlabel("Number of Cards")
plt.ylabel("Card Type")
plt.title("Card Type Distribution")

plt.xticks(rotation=45)

plt.show()

#Date pattern changed

card['issued'] = pd.to_datetime(card['issued']).dt.strftime('%y-%m-%d')
card['issued'].head()

# How the banks have performed over the years. Give their detailed analysis year-wise.


card['year'] = pd.to_datetime(card['issued']).dt.strftime('%Y')

card_count_by_year = card.groupby('year')['card_id'].count()

print(card_count_by_year)

# How the banks have performed over the years. Give their detailed analysis month-wise.

card['month'] = pd.to_datetime(card['issued']).dt.strftime('%m')
card_count_by_month = card.groupby('month')['card_id'].count()
print(card_count_by_month)

# What is the bank’s loan portfolio and how does it vary across different purposes and client segments?

loan_status_counts = loan.groupby('status')['loan_id'].count()

print(loan_status_counts)

import matplotlib.pyplot as plt

loan_status_counts = loan.groupby('status')['loan_id'].count()

plt.bar(loan_status_counts.index, loan_status_counts.values)
plt.xlabel('Loan Status')
plt.ylabel('Number of Loans')
plt.title('Loan Portfolio by Status')
plt.show()

# Can the bank introduce new financial products or services to attract more customers and increase profitability?

Yes, the bank can introduce new financial products or services to attract more customers
and increase profitability by catering to evolving customer needs
and market demands.

"""
Důchod - Pension or Income
Pojistné - Insurance
Sankční úrok - Penalty Interest
SIPO - Combined Household Payments (System for Consolidated Payments in the Czech Republic, covering utilities, TV license, etc.)
Služby - Services
Úrok - Interest
Úvěr - Loan
"""

# How can the bank improve its customer service and satisfaction levels?


unique_k_symbols = order['k_symbol'].unique()

account_count_by_k_symbol = order.groupby('k_symbol')['account_id'].count()

account_count_by_k_symbol = account_count_by_k_symbol[account_count_by_k_symbol.index != '']

print(unique_k_symbols)
print(account_count_by_k_symbol)

import matplotlib.pyplot as plt

plt.bar(account_count_by_k_symbol.index, account_count_by_k_symbol.values)
plt.xlabel("k_symbol")
plt.ylabel("Number of accounts")
plt.title("Number of accounts by k_symbol")
plt.xticks(rotation=90)
plt.show()